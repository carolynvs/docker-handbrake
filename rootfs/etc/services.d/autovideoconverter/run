#!/usr/bin/with-contenv sh

set -u # Treat unset variables as an error.

# Make sure we appear with a proper name under `ps`.
if [ ! -L "$0" ]; then
    ln -sf run "$(dirname "$0")/autovideoconverter"
    exec "$(dirname "$0")/autovideoconverter" "$@"
fi

# Set umask.
if [ "${UMASK:-UNSET}" != "UNSET" ]; then
    umask "$UMASK"
fi

AUTOMATED_CONVERSION_PRESET="${AUTOMATED_CONVERSION_PRESET:-Very Fast 1080p30}"
AUTOMATED_CONVERSION_FORMAT="${AUTOMATED_CONVERSION_FORMAT:-mp4}"
AUTOMATED_CONVERSION_SOURCE_STABLE_TIME="${AUTOMATED_CONVERSION_SOURCE_STABLE_TIME:-5}"
AUTOMATED_CONVERSION_SOURCE_MIN_DURATION="${AUTOMATED_CONVERSION_SOURCE_MIN_DURATION:-10}"

FAILED_CONVERSIONS="/config/failed_conversions"
SUCCESSFUL_CONVERSIONS="/config/successful_conversions"

HANDBRAKE_CLI="$APP_NICE_CMD s6-setuidgid $USER_ID:$GROUP_ID /usr/bin/HandBrakeCLI --preset-import-file /config/ghb/presets.json"

WATCHDIR_HASH=UNSET

log() {
    echo "autoVideoConverter: $*"
}

WATCHDIR_HASH_calculate() {
    find /watch -follow -type f -not -path '*/\.*' -printf '%T@:%s:%p\n' | md5sum | cut -d' ' -f1
}

WATCHDIR_HASH_isset() {
    [ "$WATCHDIR_HASH" != "UNSET" ]
}

WATCHDIR_HASH_update() {
    WATCHDIR_HASH="$(WATCHDIR_HASH_calculate)"
}

WATCHDIR_HASH_changed() {
    [ "$WATCHDIR_HASH" != "$(WATCHDIR_HASH_calculate)" ]
}

get_video_hash() {
    video="$1"
    if [ -f "$video" ]; then
        stat -c '%n %s %Y' "$video" | md5sum | cut -d' ' -f1
    else
        find "$video" -type f -exec stat -c '%n %s %Y' {} \; | md5sum | cut -d' ' -f1
    fi
}

get_video_titles() {
    video="$1"
    $HANDBRAKE_CLI -i "$video" \
                   -t0 \
                   --min-duration $AUTOMATED_CONVERSION_SOURCE_MIN_DURATION 2>&1 -t0 |
    grep "^+ title " | sed 's/^+ title \([0-9]\+\):$/\1/'
}

process_video() {
    video="$1"

    # Skip video if it doesn't exists (may have been removed while processing
    # the watch directory).
    if [ ! -f "$video" ] && [ ! -d "$video" ]; then
        log "Skipping '$video': no longer exists."
        return
    fi

    # Get hash of the video from its properties.
    hash="$(get_video_hash "$video")"

    # Skip video if it has been already successfully processed.
    if grep -q -w "$hash" "$SUCCESSFUL_CONVERSIONS"; then
        log "Skipping video '$video' ($hash): already processed successfully."
        return
    fi

    # Skip video if we already failed to process it.
    if grep -q -w "$hash" "$FAILED_CONVERSIONS"; then
        log "Skipping '$video' ($hash): already processed with failure."
        return
    fi

    # Skip video if it is not stable.
    log "Waiting $AUTOMATED_CONVERSION_SOURCE_STABLE_TIME seconds before processing '$video'..."
    sleep $AUTOMATED_CONVERSION_SOURCE_STABLE_TIME
    if [ "$hash" != "$(get_video_hash "$video")" ]; then
        log "Skipping '$video': currently being copied."
        return
    fi

    # Claim the video
    echo "Attemping to claim $video..."
    claimdir="/watch/claimed"
    mkdir -p $claimdir &> /dev/null
    claim="$claimdir/$(basename "$video")"
    # Claim the file so that other watchers don't also process it
    mv "$video" "$claim"

    # Check if claim was successful
    if [ ! -f "$claim" ]; then
        log "Claim failed for '$video'. Skipping."
        return
    fi
    echo "Claimed $video"

    # Move the video to the local disk
    echo "Moving $video into the container..."
    tmpdir="/tmp/autoVideoConverter"
    mkdir -p $tmpdir &> /dev/null
    video="$tmpdir/$(basename "$video")"
    mv "$claim" "$video"

    # Set the output directory.
    case "${AUTOMATED_CONVERSION_OUTPUT_SUBDIR:-UNSET}" in
        UNSET)
            OUTPUT_DIR="/output"
            ;;
        SAME_AS_SRC)
            dirname="$(dirname "$video" | sed 's|^/watch||')"
            OUTPUT_DIR="/output/$dirname"
            ;;
        *)
            OUTPUT_DIR="/output/$AUTOMATED_CONVERSION_OUTPUT_SUBDIR"
            ;;
    esac
    OUTPUT_DIR="$(echo "$OUTPUT_DIR" | sed 's|/\+|/|g' | sed 's|/\+$||')"
    s6-setuidgid $USER_ID:$GROUP_ID mkdir -p "$OUTPUT_DIR"

    # Get video titles.
    VIDEO_TITLES="$(get_video_titles "$video")"
    VIDEO_TITLES="${VIDEO_TITLES:-UNSET}"
    if [ "$VIDEO_TITLES" != "UNSET" ]; then
        NUM_VIDEO_TITLES="$(echo "$VIDEO_TITLES" | wc -l)"
    else
        NUM_VIDEO_TITLES="0"
    fi

    log "Starting conversion of '$video' ($hash)..."
    log "$NUM_VIDEO_TITLES title(s) to process."
    hb_rc=0
    for TITLE in "$VIDEO_TITLES"; do
        [ "$TITLE" != "UNSET" ] || continue

        # Get the output file basename: start with the one of the input file.
        basename="$(basename "$video" | sed 's/\.[^.]*$//')"
        # Special case when video is a DVD/Blu-ray folder: use the parent's
        # directory.
        if [ "$basename" = "VIDEO_TS" ] || [ "$basename" = "BDMV" ]; then
            if [ "$(dirname "$video")" != "/watch" ]; then
                basename="$(basename "$(dirname "$video")")"
            fi
        fi
        # If multiple titles, add the '.title-XX' suffix.
        [ "$NUM_VIDEO_TITLES" -eq 1 ] || basename="$basename.title-$TITLE"

        # Now set the final output filename by adding the extension.
        OUTPUT_FILE="$OUTPUT_DIR/$basename.$AUTOMATED_CONVERSION_FORMAT"
        if [ -f "$OUTPUT_FILE" ]; then
            hb_rc=1
            log "ERROR: Destination file '$OUTPUT_FILE' already exists."
            break
        fi

        # Invoke HandBrake.
        $HANDBRAKE_CLI -i "$video" \
                       -o "$OUTPUT_FILE" \
                       --title "$TITLE" \
                       --preset "$AUTOMATED_CONVERSION_PRESET"
        hb_rc=$?

        # Call post conversion hook.
        if [ -f /config/hooks/post_conversion.sh ]; then
            log "Executing post-conversion hook..."
            /usr/bin/with-contenv sh /config/hooks/post_conversion.sh $hb_rc "$OUTPUT_FILE"
            log "Post-conversion hook exited with $?"
        fi

        [ $hb_rc -eq 0 ] || break
    done

    if [ $hb_rc -eq 0 ]; then
        log "Conversion ended successfully."
        echo "$video $hash" >> "$SUCCESSFUL_CONVERSIONS"
        if [ "${AUTOMATED_CONVERSION_KEEP_SOURCE:-1}" -eq 0 ]; then
            rm -r "$video"
            log "Removed $video'."
            # Remove directory if empty (hidden files/folders are ignored).
            videodir="$(dirname "$video")"
            while [ "$videodir" != "/watch" ] && [ -z "$(ls "$videodir")" ]; do
                log "Removed directory '$videodir'."
                rm -rf "$videodir"
                videodir="$(dirname "$videodir")"
            done
        fi
    else
        log "Conversion failed."
        echo "$video $hash" >> "$FAILED_CONVERSIONS"
    fi
}

echo "Starting Automatic Video Converter service..."

[ -f "$FAILED_CONVERSIONS" ] || touch "$FAILED_CONVERSIONS"
[ -f "$SUCCESSFUL_CONVERSIONS" ] || touch "$SUCCESSFUL_CONVERSIONS"

while true; do
    if WATCHDIR_HASH_changed; then
        if WATCHDIR_HASH_isset; then
            log "Change detected in watch folder"
        fi
        # Make sure to update the watch directory hash before processing it.
        # This is to make sure we catch, on the next round, changes occuring
        # during the processing.
        WATCHDIR_HASH_update
        log "Processing watch folder..."
        FILELIST="$(mktemp)"
        find /watch/ -not -path "/watch/claimed/*" -type f | \
            grep -v "/\." | \
            sed 's|/VIDEO_TS/.*$|/VIDEO_TS|g' | \
            sed 's|/BDMV/.*$|/BDMV|g' | \
            uniq > "$FILELIST"
        while read -u 3 FILE
        do
            echo "Found $FILE. Processing..."
            process_video "$FILE"
        done 3<"$FILELIST"
        rm "$FILELIST"
        log "Watching for new videos..."
    fi

    sleep 5
done

# vim: set ft=sh :
